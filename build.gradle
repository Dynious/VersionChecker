buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "1.1.2"
group = "com.dynious.versionchecker" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "VersionChecker"

minecraft {
    version = "1.7.2-10.12.2.1124"
    assetDir = "eclipse/assets"
	
	replaceIn "lib/Reference.java"
    replace "@VERSION@", project.version
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    // copy licence to jar
    from('/'){
        include 'LICENCE'
    }
}

jar {
    // classifier = 'universal'
    manifest {
        attributes('Main-Class': 'com.dynious.versionchecker.deleter.Deleter')
    }
}

task devJar(type: Jar){
    classifier = 'dev' // or 'reobf'
    manifest.attributes('Main-Class': 'com.dynious.versionchecker.deleter.Deleter')
    // use compiled, but not reobfuscated classes
    from(sourceSets.main.output)
}

// add dev jar to archives system(so it'll be executed somewhere)
artifacts.archives(devJar)
